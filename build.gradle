buildscript {
	ext {
		springBootVersion = '2.1.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id 'io.franzbecker.gradle-lombok' version '2.0'
	id 'jacoco'
	id 'org.openjfx.javafxplugin' version '0.0.7'
	id 'application'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'cpp'

group = 'org.meltzg'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
	maven {
		url 'https://dl.bintray.com/ijabz/maven'
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testCompile 'junit:junit'
	testCompile 'org.mockito:mockito-core:2.+'

	compile 'net.jthink:jaudiotagger:2+'
	compile 'commons-io:commons-io:2.+'
	compile 'org.apache.commons:commons-lang3:3.+'
	compile 'org.controlsfx:controlsfx:9.0.0'

	testCompile 'org.testfx:testfx-core:4.0.15-alpha'
	testCompile 'org.testfx:testfx-junit:4.0.15-alpha'
	testCompile 'org.testfx:openjfx-monocle:jdk-11+26'
}

model {
	repositories {
		libs(PrebuiltLibraries) {
			mtp {
				headers.srcDir '/usr/include'
			}

			def libDir = '/usr/lib/x86_64-linux-gnu/'

			mtplib {
				binaries.withType(SharedLibraryBinary) {
					sharedLibraryFile = file(libDir + 'libmtp.so')
				}
			}
		}
	}
	binaries {
		all {
			if (toolChain in Gcc) {
				if (buildType ==buildTypes.debug) {
					cppCompiler.args '-g', '-std=c++17'
				} else {
					cppCompiler.args '-std=c++17'
				}
			}
			if (toolChain in VisualCpp && buildType == buildTypes.debug) {
				cppCompiler.args '/Zi'
				cppCompiler.define 'DEBUG'
				linker.args '/DEBUG'
			}
		}
	}
	components {
		jmtp(NativeLibrarySpec) {
			sources {
				cpp {
					source {
						srcDir 'src/main/cpp/src'
						include '*.cpp'
					}
					exportedHeaders {
						srcDirs 'src/main/cpp/include', '/usr/include', '/usr/local/include', '/usr/lib/jvm/default-java/include', '/usr/lib/jvm/default-java/include/linux'
					}

					lib library: 'mtp', linkage: 'api'
					lib library: 'mtplib'
				}

			}
			buildTypes {
				debug
				release
			}
		}
		jmtpx(NativeExecutableSpec) {
			sources {
				cpp {
					source {
						srcDir 'src/main/cpp/src'
						include '*.cpp'
					}
					exportedHeaders {
						srcDirs 'src/main/cpp/include', '/usr/include', '/usr/local/include', '/usr/lib/jvm/default-java/include', '/usr/lib/jvm/default-java/include/linux'
					}

					lib library: 'mtp', linkage: 'api'
					lib library: 'mtplib'
				}
			}
			buildTypes {
				debug
				release
			}
		}
	}
}

compileJava {
	options.compilerArgs += ['-h', file('src/main/cpp/include/')]
}

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled true
	}
}

javafx {
	modules = ['javafx.controls', 'javafx.fxml']
}

application {
	mainClassName = 'org.meltzg.jmlm.JmlmApplication'
	applicationDefaultJvmArgs = ['--add-opens', 'javafx.graphics/javafx.scene=ALL-UNNAMED']
}

test {
	if (project.hasProperty('excludeTests')) {
		exclude project.property('excludeTests')
	}
	systemProperty 'java.library.path', '.:/usr/lib/x86_64-linux-gnu/:build/libs/jmtp/shared/debug/'
	dependsOn 'jmtpDebugSharedLibrary'
}
